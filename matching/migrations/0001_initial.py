# Generated by Django 4.2.7 on 2025-09-14 11:51

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("referrals", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="MatchingThreshold",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("gp", "GP"),
                            ("patient", "Patient"),
                            ("psychologist", "Psychologist"),
                            ("admin", "Admin"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "auto_threshold",
                    models.FloatField(help_text="Threshold for automatic matching"),
                ),
                (
                    "high_touch_threshold",
                    models.FloatField(help_text="Threshold for high-touch matching"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Matching Threshold",
                "verbose_name_plural": "Matching Thresholds",
                "db_table": "matching_matching_threshold",
                "indexes": [
                    models.Index(
                        fields=["user_type"], name="matching_ma_user_ty_bf1c6e_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="matching_ma_is_acti_6613e3_idx"
                    ),
                ],
                "unique_together": {("user_type",)},
            },
        ),
        migrations.CreateModel(
            name="MatchingAlgorithm",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "algorithm_type",
                    models.CharField(
                        choices=[
                            ("vector_similarity", "Vector Similarity"),
                            ("bm25", "BM25"),
                            ("hybrid", "Hybrid"),
                            ("structured_only", "Structured Only"),
                        ],
                        max_length=20,
                    ),
                ),
                ("version", models.CharField(default="1.0", max_length=20)),
                (
                    "config",
                    models.JSONField(default=dict, help_text="Algorithm configuration"),
                ),
                (
                    "accuracy",
                    models.FloatField(
                        blank=True, help_text="Overall accuracy score", null=True
                    ),
                ),
                (
                    "precision",
                    models.FloatField(
                        blank=True, help_text="Precision score", null=True
                    ),
                ),
                (
                    "recall",
                    models.FloatField(blank=True, help_text="Recall score", null=True),
                ),
                (
                    "f1_score",
                    models.FloatField(blank=True, help_text="F1 score", null=True),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_default", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Matching Algorithm",
                "verbose_name_plural": "Matching Algorithms",
                "db_table": "matching_matching_algorithm",
                "indexes": [
                    models.Index(
                        fields=["algorithm_type"], name="matching_ma_algorit_7c8961_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="matching_ma_is_acti_da1945_idx"
                    ),
                    models.Index(
                        fields=["is_default"], name="matching_ma_is_defa_48283b_idx"
                    ),
                ],
                "unique_together": {("name", "version")},
            },
        ),
        migrations.CreateModel(
            name="CalibrationModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "calibration_type",
                    models.CharField(
                        choices=[
                            ("isotonic", "Isotonic Regression"),
                            ("platt", "Platt Scaling"),
                            ("temperature", "Temperature Scaling"),
                        ],
                        max_length=20,
                    ),
                ),
                ("version", models.CharField(default="1.0", max_length=20)),
                ("model_data", models.TextField(help_text="Serialized model data")),
                (
                    "brier_score",
                    models.FloatField(
                        blank=True, help_text="Brier score for calibration", null=True
                    ),
                ),
                (
                    "reliability_score",
                    models.FloatField(
                        blank=True, help_text="Reliability score", null=True
                    ),
                ),
                ("training_samples", models.PositiveIntegerField(default=0)),
                ("training_date", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_default", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Calibration Model",
                "verbose_name_plural": "Calibration Models",
                "db_table": "matching_calibration_model",
                "indexes": [
                    models.Index(
                        fields=["calibration_type"],
                        name="matching_ca_calibra_f8fea1_idx",
                    ),
                    models.Index(
                        fields=["is_active"], name="matching_ca_is_acti_c0aafe_idx"
                    ),
                    models.Index(
                        fields=["is_default"], name="matching_ca_is_defa_ee0cf9_idx"
                    ),
                ],
                "unique_together": {("name", "version")},
            },
        ),
        migrations.CreateModel(
            name="MatchingRun",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("candidates_found", models.PositiveIntegerField(default=0)),
                ("candidates_shortlisted", models.PositiveIntegerField(default=0)),
                ("candidates_invited", models.PositiveIntegerField(default=0)),
                (
                    "config",
                    models.JSONField(
                        default=dict, help_text="Matching configuration used"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, help_text="Error message if failed"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "referral",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matching_runs",
                        to="referrals.referral",
                    ),
                ),
            ],
            options={
                "verbose_name": "Matching Run",
                "verbose_name_plural": "Matching Runs",
                "db_table": "matching_matching_run",
                "indexes": [
                    models.Index(
                        fields=["referral", "status"],
                        name="matching_ma_referra_d1f4f2_idx",
                    ),
                    models.Index(
                        fields=["status"], name="matching_ma_status_3b59bf_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="matching_ma_created_5b2c0d_idx"
                    ),
                ],
            },
        ),
    ]
